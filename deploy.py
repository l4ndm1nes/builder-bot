#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è –±–æ—Ç–∞
"""

import os
import subprocess
import sys
from pathlib import Path

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞")
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        if e.stdout:
            print(f"–í—ã–≤–æ–¥: {e.stdout}")
        if e.stderr:
            print(f"–û—à–∏–±–∫–∞: {e.stderr}")
        return False

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    requirements = {
        "git": "git --version",
        "python": "python --version",
        "pip": "pip --version"
    }
    
    missing = []
    for tool, command in requirements.items():
        if not run_command(command, f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {tool}"):
            missing.append(tool)
    
    if missing:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(missing)}")
        return False
    
    print("‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    return True

def setup_environment():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if not Path(".env").exists():
        print("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ env_example.txt –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ credentials.json
    if not Path("credentials.json").exists():
        print("‚ö†Ô∏è –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª —Å –∫–ª—é—á–∞–º–∏ Google API –∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –≤ credentials.json")
        return False
    
    print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    return True

def test_locally():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    if not run_command("python test_bot.py", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"):
        print("‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.")
        return False
    
    return True

def deploy_to_railway():
    """–î–µ–ø–ª–æ–∏—Ç –Ω–∞ Railway"""
    print("üöÄ –î–µ–ø–ª–æ–π –Ω–∞ Railway...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ Railway
    if not Path("railway.json").exists():
        print("‚ùå Railway –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if not run_command("git add .", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ git"):
        return False
    
    if not run_command('git commit -m "Deploy construction bot"', "–ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"):
        return False
    
    # –î–µ–ø–ª–æ–∏–º
    if not run_command("railway up", "–î–µ–ø–ª–æ–π –Ω–∞ Railway"):
        return False
    
    print("‚úÖ –î–µ–ø–ª–æ–π –Ω–∞ Railway –∑–∞–≤–µ—Ä—à–µ–Ω")
    return True

def deploy_to_heroku():
    """–î–µ–ø–ª–æ–∏—Ç –Ω–∞ Heroku"""
    print("üöÄ –î–µ–ø–ª–æ–π –Ω–∞ Heroku...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ Heroku
    try:
        subprocess.run("heroku --version", shell=True, check=True, capture_output=True)
    except subprocess.CalledProcessError:
        print("‚ùå Heroku CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if not run_command("git add .", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ git"):
        return False
    
    if not run_command('git commit -m "Deploy construction bot"', "–ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"):
        return False
    
    # –î–µ–ø–ª–æ–∏–º
    if not run_command("git push heroku main", "–î–µ–ø–ª–æ–π –Ω–∞ Heroku"):
        return False
    
    print("‚úÖ –î–µ–ø–ª–æ–π –Ω–∞ Heroku –∑–∞–≤–µ—Ä—à–µ–Ω")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è"""
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –±–æ—Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏\n")
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
    if len(sys.argv) > 1:
        platform = sys.argv[1].lower()
    else:
        platform = input("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (railway/heroku): ").lower()
    
    if platform not in ["railway", "heroku"]:
        print("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'railway' –∏–ª–∏ 'heroku'")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if not check_requirements():
        return
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not setup_environment():
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    if not test_locally():
        return
    
    # –î–µ–ø–ª–æ–∏–º
    if platform == "railway":
        success = deploy_to_railway()
    else:
        success = deploy_to_heroku()
    
    if success:
        print("\nüéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("–í–∞—à –±–æ—Ç —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ!")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –≤ Telegram")
        print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        print("3. –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
    else:
        print("\n‚ùå –î–µ–ø–ª–æ–π –Ω–µ —É–¥–∞–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")

if __name__ == "__main__":
    main()
