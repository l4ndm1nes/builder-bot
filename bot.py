import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from database import get_or_create_user, create_request, get_active_requests, find_matches
from google_sheets import sheets_manager
from models import User, Request
from config import Config
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ConstructionBot:
    def __init__(self):
        self.application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("profile", self.profile_command))
        self.application.add_handler(CommandHandler("my_requests", self.my_requests_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
            if hasattr(update, 'effective_user') and update.effective_user:
                user = update.effective_user
            elif hasattr(update, 'from_user') and update.from_user:
                user = update.from_user
            else:
                logger.error("start_command: No user found in update")
                return
            
            db_user = get_or_create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            welcome_text = f"""
üèóÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏!

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É –¥–ª—è –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏–∫–∏
‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
            """
            
            keyboard = [
                [InlineKeyboardButton("üîç –ò—â—É —Ç–µ—Ö–Ω–∏–∫—É (–ö–ª–∏–µ–Ω—Ç)", callback_data="client_mode")],
                [InlineKeyboardButton("üöõ –ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ—Ö–Ω–∏–∫—É (–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)", callback_data="contractor_mode")],
                [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
                [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_requests")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if hasattr(update, 'message') and update.message:
                await update.message.reply_text(welcome_text, reply_markup=reply_markup)
            elif hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)
            else:
                logger.error(f"Unknown update type: {type(update)}")
                
        except Exception as e:
            logger.error(f"Error in start_command: {e}")
            if hasattr(update, 'message') and update.message:
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            elif hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:

üîç **–†–µ–∂–∏–º –∫–ª–∏–µ–Ω—Ç–∞:**
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω—É–∂–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –±—é–¥–∂–µ—Ç –∏ —Å—Ä–æ–∫–∏
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö

üöõ **–†–µ–∂–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:**
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏–∫–∏
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–∫–∞–∑–∞—Ö

üìã **–ú–æ–∏ –∑–∞—è–≤–∫–∏:**
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∑–∞—è–≤–∫–∞–º–∏
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–∞/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/profile - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
/my_requests - –ú–æ–∏ –∑–∞—è–≤–∫–∏
        """
        await update.message.reply_text(help_text)
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
        await self.show_profile(update, context)
    
    async def my_requests_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_requests"""
        await self.show_my_requests(update, context)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        logger.info(f"button_callback: –ü–æ–ª—É—á–µ–Ω callback: {data}")
        logger.info(f"button_callback: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {query.from_user.id}, {query.from_user.first_name}")
        
        try:
            if data == "client_mode":
                logger.info("button_callback: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º client_mode")
                await self.start_client_request(query, context)
            elif data == "contractor_mode":
                logger.info("button_callback: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º contractor_mode")
                await self.start_contractor_request(query, context)
            elif data == "profile":
                logger.info("button_callback: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º profile")
                await self.show_profile(query, context)
            elif data == "my_requests":
                logger.info("button_callback: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º my_requests")
                await self.show_my_requests(query, context)
            elif data == "start_menu":
                logger.info("button_callback: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º start_menu")
                await self.start_command(query, context)
            elif data.startswith("create_request_"):
                request_type = data.split("_")[2]
                logger.info(f"button_callback: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º create_request_{request_type}")
                await self.create_request_flow(query, context, request_type)
            elif data == "toggle_mode":
                logger.info("button_callback: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º toggle_mode")
                await self.toggle_mode(query, context)
            elif data == "set_phone":
                logger.info("button_callback: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º set_phone")
                await self.set_phone(query, context)
            elif data == "contact_message":
                logger.info("button_callback: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º contact_message")
                await self.handle_contact_preference(query, context, "message")
            elif data == "contact_call":
                logger.info("button_callback: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º contact_call")
                await self.handle_contact_preference(query, context, "call")
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤
                logger.warning(f"button_callback: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
                await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        except Exception as e:
            logger.error(f"button_callback: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {data}: {e}", exc_info=True)
            try:
                await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            except Exception as e2:
                logger.error(f"button_callback: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e2}")
    
    async def start_client_request(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        text = """
üîç –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞

–í—ã –∏—â–µ—Ç–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É? –û—Ç–ª–∏—á–Ω–æ!

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏ (—ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä, –∫—Ä–∞–Ω, –±—É–ª—å–¥–æ–∑–µ—Ä –∏ —Ç.–¥.)
‚Ä¢ –õ–æ–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç
‚Ä¢ –ë—é–¥–∂–µ—Ç
‚Ä¢ –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request_client")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="start_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def start_contractor_request(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        text = """
üöõ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è

–í—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É? –û—Ç–ª–∏—á–Ω–æ!

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞
‚Ä¢ –õ–æ–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
‚Ä¢ –¶–µ–Ω—ã
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request_contractor")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="start_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def create_request_flow(self, query, context: ContextTypes.DEFAULT_TYPE, request_type: str):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        context.user_data['creating_request'] = True
        context.user_data['request_type'] = request_type
        context.user_data['request_data'] = {}
        
        if request_type == 'client':
            text = """
üîç –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞

–®–∞–≥ 1/5: –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏

–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –Ω—É–∂–Ω–∞:
(–Ω–∞–ø—Ä–∏–º–µ—Ä: —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä, –∫—Ä–∞–Ω, –±—É–ª—å–¥–æ–∑–µ—Ä, —Å–∞–º–æ—Å–≤–∞–ª, –∞–≤—Ç–æ–±–µ—Ç–æ–Ω–æ—Å–º–µ—Å–∏—Ç–µ–ª—å)
            """
        else:
            text = """
üöõ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è

–®–∞–≥ 1/5: –î–æ—Å—Ç—É–ø–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞

–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫—É—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å:
(–Ω–∞–ø—Ä–∏–º–µ—Ä: —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä JCB, –∫—Ä–∞–Ω 25—Ç, –±—É–ª—å–¥–æ–∑–µ—Ä CAT)
            """
        
        await query.edit_message_text(text)
    
    async def show_profile(self, update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info("show_profile: –ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
            if hasattr(update, 'effective_user') and update.effective_user:
                user = update.effective_user
            elif hasattr(update, 'from_user') and update.from_user:
                user = update.from_user
            else:
                logger.error("show_profile: No user found in update")
                return
            
            logger.info(f"show_profile: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}, {user.first_name}")
                
            db_user = get_or_create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            logger.info(f"show_profile: DB –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–Ω–∞–π–¥–µ–Ω: {db_user.id}")
            
            profile_text = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üÜî ID: {db_user.telegram_id}
üë§ –ò–º—è: {db_user.first_name} {db_user.last_name or ''}
üì± Username: @{db_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {db_user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üèóÔ∏è –†–µ–∂–∏–º: {'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å' if db_user.is_contractor else '–ö–ª–∏–µ–Ω—Ç'}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {db_user.created_at.strftime('%d.%m.%Y')}
            """
            
            keyboard = [
                [InlineKeyboardButton("üìû –£–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="set_phone")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º", callback_data="toggle_mode")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            logger.info("show_profile: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
            if hasattr(update, 'message') and update.message:
                logger.info("show_profile: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ message")
                await update.message.reply_text(profile_text, reply_markup=reply_markup)
            elif hasattr(update, 'callback_query') and update.callback_query:
                logger.info("show_profile: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ callback_query")
                await update.callback_query.edit_message_text(profile_text, reply_markup=reply_markup)
            else:
                logger.error(f"show_profile: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update: {type(update)}")
                
        except Exception as e:
            logger.error(f"show_profile: –û—à–∏–±–∫–∞: {e}", exc_info=True)
            error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            try:
                if hasattr(update, 'message') and update.message:
                    await update.message.reply_text(error_text)
                elif hasattr(update, 'callback_query') and update.callback_query:
                    await update.callback_query.edit_message_text(error_text)
            except Exception as e2:
                logger.error(f"show_profile: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e2}")
    
    async def show_my_requests(self, update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info("show_my_requests: –ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
            if hasattr(update, 'effective_user') and update.effective_user:
                user = update.effective_user
            elif hasattr(update, 'from_user') and update.from_user:
                user = update.from_user
            else:
                logger.error("show_my_requests: No user found in update")
                return
            
            logger.info(f"show_my_requests: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}, {user.first_name}")
                
            db_user = get_or_create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            logger.info(f"show_my_requests: DB –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–Ω–∞–π–¥–µ–Ω: {db_user.id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            from database import SessionLocal, Request
            logger.info("show_my_requests: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            db = SessionLocal()
            try:
                logger.info(f"show_my_requests: –ò—â–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user.id}")
                user_requests = db.query(Request).filter(Request.user_id == db_user.id).order_by(Request.created_at.desc()).all()
                logger.info(f"show_my_requests: –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: {len(user_requests)}")
                
                if not user_requests:
                    text = """
üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.

–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤!
                    """
                    logger.info("show_my_requests: –ù–µ—Ç –∑–∞—è–≤–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É")
                else:
                    text = "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
                    for req in user_requests[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫
                        status_emoji = "‚úÖ" if req.status == "active" else "‚è∏Ô∏è"
                        type_emoji = "üîç" if req.request_type == "client" else "üöõ"
                        text += f"{status_emoji} {type_emoji} ID: {req.id}\n"
                        text += f"   üìç {req.location}\n"
                        text += f"   üìÖ {req.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                        text += f"   üìä –°—Ç–∞—Ç—É—Å: {req.status}\n\n"
                    
                    if len(user_requests) > 5:
                        text += f"... –∏ –µ—â–µ {len(user_requests) - 5} –∑–∞—è–≤–æ–∫"
                    logger.info(f"show_my_requests: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç —Å {len(user_requests)} –∑–∞—è–≤–∫–∞–º–∏")
                
            finally:
                db.close()
                logger.info("show_my_requests: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="start_menu")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            logger.info("show_my_requests: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
            if hasattr(update, 'message') and update.message:
                logger.info("show_my_requests: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ message")
                await update.message.reply_text(text, reply_markup=reply_markup)
            elif hasattr(update, 'callback_query') and update.callback_query:
                logger.info("show_my_requests: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ callback_query")
                await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            else:
                logger.error(f"show_my_requests: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update: {type(update)}")
                
        except Exception as e:
            logger.error(f"show_my_requests: –û—à–∏–±–∫–∞: {e}", exc_info=True)
            error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            try:
                if hasattr(update, 'message') and update.message:
                    await update.message.reply_text(error_text)
                elif hasattr(update, 'callback_query') and update.callback_query:
                    await update.callback_query.edit_message_text(error_text)
            except Exception as e2:
                logger.error(f"show_my_requests: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e2}")
    
    async def toggle_mode(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º"""
        try:
            user = query.from_user
            db_user = get_or_create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
            db_user.is_contractor = not db_user.is_contractor
            from database import SessionLocal
            db = SessionLocal()
            try:
                db.merge(db_user)
                db.commit()
            finally:
                db.close()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
            await self.start_command(query, context)
            
        except Exception as e:
            logger.error(f"toggle_mode: –û—à–∏–±–∫–∞: {e}", exc_info=True)
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def set_phone(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            text = """
üìû **–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ +380501234567
‚Ä¢ 0501234567
‚Ä¢ (050) 123-45-67

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.
            """
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="start_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            context.user_data['waiting_for_phone'] = True
            
        except Exception as e:
            logger.error(f"set_phone: –û—à–∏–±–∫–∞: {e}", exc_info=True)
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_phone_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            phone = update.message.text.strip()
            
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            import re
            phone_pattern = r'^(\+?38)?0\d{9}$'
            clean_phone = re.sub(r'[^\d+]', '', phone)
            
            if not re.match(phone_pattern, clean_phone):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                    "‚Ä¢ +380501234567\n"
                    "‚Ä¢ 0501234567\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            user = update.effective_user
            db_user = get_or_create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            db_user.phone = clean_phone
            from database import SessionLocal
            db = SessionLocal()
            try:
                db.merge(db_user)
                db.commit()
            finally:
                db.close()
            
            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            context.user_data.pop('waiting_for_phone', None)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            success_text = f"""
‚úÖ **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**

üìû –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: {clean_phone}

–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.
            """
            
            keyboard = [
                [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"handle_phone_input: –û—à–∏–±–∫–∞: {e}", exc_info=True)
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_contact_preference(self, query, context: ContextTypes.DEFAULT_TYPE, preference: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            request_data = context.user_data.get('request_data', {})
            request_type = context.user_data.get('request_type', 'client')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Å–≤—è–∑–∏
            request_data['contact_preference'] = preference
            
            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏
            context.user_data.pop('waiting_for_contact_preference', None)
            context.user_data.pop('request_data', None)
            context.user_data.pop('request_type', None)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            await self.finish_request_creation(query, context, request_data, request_type)
            
        except Exception as e:
            logger.error(f"handle_contact_preference: –û—à–∏–±–∫–∞: {e}", exc_info=True)
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if context.user_data.get('creating_request'):
            await self.handle_request_creation(update, context)
        elif context.user_data.get('waiting_for_phone'):
            await self.handle_phone_input(update, context)
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. /help - –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            )
    
    async def handle_request_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ—à–∞–≥–æ–≤–æ"""
        text = update.message.text
        request_data = context.user_data.get('request_data', {})
        request_type = context.user_data.get('request_type')
        step = len(request_data) + 1
        
        if step == 1:
            if request_type == 'client':
                request_data['equipment_type'] = text
                await update.message.reply_text("–®–∞–≥ 2/5: –õ–æ–∫–∞—Ü–∏—è\n\n–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ–±–ª–∞—Å—Ç—å, –≥–¥–µ –Ω—É–∂–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞:")
            else:
                request_data['available_equipment'] = text
                await update.message.reply_text("–®–∞–≥ 2/5: –õ–æ–∫–∞—Ü–∏—è\n\n–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ–±–ª–∞—Å—Ç—å, –≥–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ:")
        
        elif step == 2:
            request_data['location'] = text
            if request_type == 'client':
                await update.message.reply_text("–®–∞–≥ 3/5: –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç\n\n–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:")
            else:
                await update.message.reply_text("–®–∞–≥ 3/5: –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã\n\n–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ —Å—Ñ–µ—Ä–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏?")
        
        elif step == 3:
            if request_type == 'client':
                request_data['description'] = text
                await update.message.reply_text("–®–∞–≥ 4/5: –ë—é–¥–∂–µ—Ç\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ –≥—Ä–∏–≤–Ω–∞—Ö:")
            else:
                try:
                    request_data['experience_years'] = int(text)
                    await update.message.reply_text("–®–∞–≥ 4/5: –¶–µ–Ω–∞ –∑–∞ —á–∞—Å\n\n–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –∑–∞ —á–∞—Å –≤ –≥—Ä–∏–≤–Ω–∞—Ö:")
                except ValueError:
                    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç —á–∏—Å–ª–æ–º:")
                    return
        
        elif step == 4:
            if request_type == 'client':
                try:
                    request_data['budget'] = float(text)
                    await update.message.reply_text("–®–∞–≥ 5/5: –°—Ä–æ–∫–∏\n\n–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω—É–∂–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞?")
                except ValueError:
                    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç —á–∏—Å–ª–æ–º:")
                    return
            else:
                try:
                    request_data['price_per_hour'] = float(text)
                    await update.message.reply_text("–®–∞–≥ 5/5: –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
                except ValueError:
                    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º:")
                    return
        
        elif step == 5:
            if request_type == 'client':
                request_data['work_duration'] = text
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
                await self.ask_contact_preference(update, context, request_data, request_type)
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                user = update.effective_user
                from database import SessionLocal
                db = SessionLocal()
                try:
                    db_user = get_or_create_user(
                        telegram_id=user.id,
                        username=user.username,
                        first_name=user.first_name,
                        last_name=user.last_name
                    )
                    db_user.phone = text
                    db.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    print(f"–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω: {text}")
                finally:
                    db.close()
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
                await self.ask_contact_preference(update, context, request_data, request_type)
        
        context.user_data['request_data'] = request_data
    
    async def ask_contact_preference(self, update: Update, context: ContextTypes.DEFAULT_TYPE, request_data: dict, request_type: str):
        """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Å–ø–æ—Å–æ–±—É —Å–≤—è–∑–∏"""
        text = """
üìû **–ö–∞–∫ —Å –≤–∞–º–∏ –ª—É—á—à–µ —Å–≤—è–∑–∞—Ç—å—Å—è?**

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:
        """
        
        keyboard = [
            [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", callback_data="contact_message")],
            [InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data="contact_call")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="start_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
        context.user_data['waiting_for_contact_preference'] = True
        context.user_data['request_data'] = request_data
        context.user_data['request_type'] = request_type
    
    async def finish_request_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, request_data: dict, request_type: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
        user = update.effective_user
        from database import SessionLocal
        db = SessionLocal()
        try:
            db_user = get_or_create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if request_type == 'client':
                title = f"–ò—â—É {request_data.get('equipment_type', '—Ç–µ—Ö–Ω–∏–∫—É')} –≤ {request_data.get('location', '')}"
            else:
                title = f"–ü—Ä–µ–¥–ª–∞–≥–∞—é {request_data.get('available_equipment', '—Ç–µ—Ö–Ω–∏–∫—É')} –≤ {request_data.get('location', '')}"
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            request = create_request(
                user_id=db_user.id,
                request_type=request_type,
                title=title,
                contact_preference=request_data.get('contact_preference', 'message'),
                **request_data
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Sheets
            sheets_manager.add_request(request, db_user)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data.pop('creating_request', None)
            context.user_data.pop('request_type', None)
            context.user_data.pop('request_data', None)
            
            success_text = f"""
‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üÜî ID –∑–∞—è–≤–∫–∏: {request.id}
üìã –¢–∏–ø: {'–ö–ª–∏–µ–Ω—Ç' if request_type == 'client' else '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}
üìç –õ–æ–∫–∞—Ü–∏—è: {request_data.get('location', '')}
üìÖ –°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y %H:%M')}

–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º. 
–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö!
            """
            
            keyboard = [
                [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_requests")],
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∑–∞—è–≤–∫—É", callback_data="start_menu")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(success_text, reply_markup=reply_markup)
            
        finally:
            db.close()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.application.run_polling()

if __name__ == '__main__':
    from database import create_tables
    create_tables()
    
    bot = ConstructionBot()
    bot.run()
