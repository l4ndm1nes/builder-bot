#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_or_create_user, create_request
from sync_sheets import sheets_sync
from config import Config

logger = logging.getLogger(__name__)

class RequestHandler:
    def __init__(self):
        self.steps = {
            'client': [
                {'key': 'equipment_type', 'question': '–®–∞–≥ 1/5: –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏\n\n–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –Ω—É–∂–Ω–∞:\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä, –∫—Ä–∞–Ω, –±—É–ª—å–¥–æ–∑–µ—Ä, —Å–∞–º–æ—Å–≤–∞–ª, –∞–≤—Ç–æ–±–µ—Ç–æ–Ω–æ—Å–º–µ—Å–∏—Ç–µ–ª—å)'},
                {'key': 'location', 'question': '–®–∞–≥ 2/5: –õ–æ–∫–∞—Ü–∏—è\n\n–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ–±–ª–∞—Å—Ç—å, –≥–¥–µ –Ω—É–∂–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞:'},
                {'key': 'description', 'question': '–®–∞–≥ 3/5: –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç\n\n–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:'},
                {'key': 'budget', 'question': '–®–∞–≥ 4/5: –ë—é–¥–∂–µ—Ç\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ –≥—Ä–∏–≤–Ω–∞—Ö:', 'type': 'float'},
                {'key': 'work_duration', 'question': '–®–∞–≥ 5/5: –°—Ä–æ–∫–∏\n\n–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω—É–∂–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞?'},
            ],
            'contractor': [
                {'key': 'available_equipment', 'question': '–®–∞–≥ 1/5: –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏\n\n–ö–∞–∫—É—é —Ç–µ—Ö–Ω–∏–∫—É –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ?\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–∞–º–æ—Å–≤–∞–ª 25 —Ç–æ–Ω–Ω, —Ç—Ä–∞–∫—Ç–æ—Ä, –∞–≤—Ç–æ–∫—Ä–∞–Ω 50—Ç)'},
                {'key': 'location', 'question': '–®–∞–≥ 2/5: –õ–æ–∫–∞—Ü–∏—è\n\n–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ–±–ª–∞—Å—Ç—å, –≥–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ:'},
                {'key': 'experience_years', 'question': '–®–∞–≥ 3/5: –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã\n\n–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ —Å—Ñ–µ—Ä–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏?', 'type': 'int'},
                {'key': 'price_per_hour', 'question': '–®–∞–≥ 4/5: –¶–µ–Ω–∞ –∑–∞ —á–∞—Å\n\n–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –∑–∞ —á–∞—Å –≤ –≥—Ä–∏–≤–Ω–∞—Ö:', 'type': 'float'},
                {'key': 'phone', 'question': '–®–∞–≥ 5/5: –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:'},
            ]
        }
    
    def start_request(self, request_type: str, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
        context.user_data['request_handler'] = {
            'type': request_type,
            'step': 0,
            'data': {}
        }
        return self.get_current_step_question(context)
    
    def get_current_step_question(self, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞"""
        handler_data = context.user_data.get('request_handler', {})
        request_type = handler_data.get('type')
        step = handler_data.get('step', 0)
        
        if not request_type or step >= len(self.steps[request_type]):
            return None
            
        return self.steps[request_type][step]['question']
    
    def process_step(self, text: str, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π —à–∞–≥"""
        handler_data = context.user_data.get('request_handler', {})
        request_type = handler_data.get('type')
        step = handler_data.get('step', 0)
        data = handler_data.get('data', {})
        
        if not request_type or step >= len(self.steps[request_type]):
            return {'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥'}
        
        step_config = self.steps[request_type][step]
        key = step_config['key']
        value_type = step_config.get('type', 'str')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
        try:
            if value_type == 'int':
                value = int(text)
            elif value_type == 'float':
                value = float(text)
            else:
                value = text
        except ValueError:
            error_msg = {
                'int': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ:',
                'float': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ:'
            }.get(value_type, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:')
            return {'error': error_msg}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        data[key] = value
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–µ phone
        if key == 'phone':
            data['user_phone'] = value
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        step += 1
        context.user_data['request_handler'] = {
            'type': request_type,
            'step': step,
            'data': data
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ —à–∞–≥–∏
        if step >= len(self.steps[request_type]):
            return {'completed': True, 'data': data, 'type': request_type}
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        next_question = self.steps[request_type][step]['question']
        return {'question': next_question}
    
    def create_contact_preference_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏"""
        keyboard = [
            [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", callback_data="contact_message")],
            [InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data="contact_call")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="start_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def finish_request(self, update_or_query, context: ContextTypes.DEFAULT_TYPE, contact_preference: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
        try:
            handler_data = context.user_data.get('request_handler', {})
            request_type = handler_data.get('type')
            data = handler_data.get('data', {})
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if hasattr(update_or_query, 'effective_user'):
                user = update_or_query.effective_user
            elif hasattr(update_or_query, 'from_user'):
                user = update_or_query.from_user
            else:
                raise Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            db_user = get_or_create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if 'user_phone' in data:
                from database import SessionLocal
                db = SessionLocal()
                try:
                    db_user = db.merge(db_user)
                    db_user.phone = data['user_phone']
                    db.commit()
                finally:
                    db.close()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if request_type == 'client':
                title = f"–ò—â—É {data.get('equipment_type', '—Ç–µ—Ö–Ω–∏–∫—É')} –≤ {data.get('location', '')}"
            else:
                title = f"–ü—Ä–µ–¥–ª–∞–≥–∞—é {data.get('available_equipment', '—Ç–µ—Ö–Ω–∏–∫—É')} –≤ {data.get('location', '')}"
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            request_data = data.copy()
            request_data['contact_preference'] = contact_preference
            
            request = create_request(
                user_id=db_user.id,
                request_type=request_type,
                title=title,
                **request_data
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Sheets
            sheets_sync.add_request_to_sheets(request, db_user)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            await self.notify_admin(request, db_user)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('request_handler', None)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_text = f"""
‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üÜî ID –∑–∞—è–≤–∫–∏: {request.id}
üìã –¢–∏–ø: {'–ö–ª–∏–µ–Ω—Ç' if request_type == 'client' else '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}
üìç –õ–æ–∫–∞—Ü–∏—è: {data.get('location', '')}
üìÖ –°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y %H:%M')}

–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º. 
–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö!
            """
            
            keyboard = [
                [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_requests")],
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∑–∞—è–≤–∫—É", callback_data="start_menu")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if hasattr(update_or_query, 'message'):
                await update_or_query.message.reply_text(success_text, reply_markup=reply_markup)
            elif hasattr(update_or_query, 'edit_message_text'):
                await update_or_query.edit_message_text(success_text, reply_markup=reply_markup)
            
            return True
            
        except Exception as e:
            logger.error(f"finish_request: –û—à–∏–±–∫–∞: {e}", exc_info=True)
            
            error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            if hasattr(update_or_query, 'message'):
                await update_or_query.message.reply_text(error_text)
            elif hasattr(update_or_query, 'edit_message_text'):
                await update_or_query.edit_message_text(error_text)
            
            return False
    
    async def notify_admin(self, request, user):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
        try:
            admin_id = Config.ADMIN_USER_ID
            if not admin_id:
                return
            
            type_emoji = "üîç" if request.request_type == "client" else "üöõ"
            contact_emoji = "üí¨" if request.contact_preference == "message" else "üìû"
            
            admin_message = f"""
üÜï **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request.id}**

{type_emoji} **–¢–∏–ø:** {'–ö–ª–∏–µ–Ω—Ç' if request.request_type == 'client' else '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}
üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.first_name} {user.last_name or ''}
üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìç **–õ–æ–∫–∞—Ü–∏—è:** {request.location}
üìù **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {request.title}
{contact_emoji} **–°–≤—è–∑—å:** {request.contact_preference}

üìÖ **–°–æ–∑–¥–∞–Ω–∞:** {request.created_at.strftime('%d.%m.%Y %H:%M')}
            """
            
            from telegram import Bot
            bot = Bot(token=Config.TELEGRAM_BOT_TOKEN)
            await bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"notify_admin: –û—à–∏–±–∫–∞: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
request_handler = RequestHandler()
